<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.jia.mapper.UserMapper" >
  <resultMap id="BaseResultMap" type="cn.jia.domain.User" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="username" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="password" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="answer1" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="answer2" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="flag" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="role_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    id, username, password, answer1, answer2, flag, create_time, update_time,role_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.jia.domain.User" >
    insert into user (id, username, password, 
      answer1, answer2, flag, 
      create_time, update_time,role_id)
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{answer1,jdbcType=VARCHAR}, #{answer2,jdbcType=VARCHAR}, #{flag,jdbcType=INTEGER}, 
     now(),now(),#{roleId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="cn.jia.domain.User" >
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="answer1 != null" >
        answer1,
      </if>
      <if test="answer2 != null" >
        answer2,
      </if>
      <if test="flag != null" >
        flag,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="roleId != null" >
        role_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="answer1 != null" >
        #{answer1,jdbcType=VARCHAR},
      </if>
      <if test="answer2 != null" >
        #{answer2,jdbcType=VARCHAR},
      </if>
      <if test="flag != null" >
        #{flag,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        now(),
      </if>
      <if test="updateTime != null" >
       now(),
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=INTEGER}
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.jia.domain.User" >
    update user
    <set >
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="answer1 != null" >
        answer1 = #{answer1,jdbcType=VARCHAR},
      </if>
      <if test="answer2 != null" >
        answer2 = #{answer2,jdbcType=VARCHAR},
      </if>
      <if test="flag != null" >
        flag = #{flag,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="roleId != null" >
        role_id = #{roleId,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.jia.domain.User" >
    update user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      answer1 = #{answer1,jdbcType=VARCHAR},
      answer2 = #{answer2,jdbcType=VARCHAR},
      flag = #{flag,jdbcType=INTEGER},
      update_time = now(),
      role_id = #{roleId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="finByUsername" parameterType="String" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List"/>
    FROM USER WHERE username = #{username}
  </select>

  <select id="finByUsernameAndPassword" parameterType="map" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List"/>
    FROM USER WHERE username = #{username} and password = #{password}
  </select>

  <select id="findUserLike" parameterType="java.lang.String" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List"/>
    FROM USER
    WHERE  flag = 1
    <if test="username != null and username !='' ">
     AND  username LIKE concat('%',#{username},'%')
    </if>
    order BY create_time DESC
  </select>
</mapper>